package com.gitdb;

import java.sql.*;
import java.util.Map;
import java.util.Properties;
import java.util.UUID;
import java.util.concurrent.Executor;

public class GitDBConnection implements Connection {
    private final String endpoint;
    private final String sessionId;
    private boolean closed = false;

   public GitDBConnection(String endpoint) {
        this.endpoint = endpoint;
        this.sessionId = UUID.randomUUID().toString();
    }

    public String getEndpoint() {
        return endpoint;
    }

    public String getSessionId() {
        return sessionId;
    }

    @Override public Statement createStatement() { return new GitDBStatement(this); }
    @Override public void close() { closed = true; }
    @Override public boolean isClosed() { return closed; }
    @Override public boolean isValid(int timeout) { return !closed; }

    @Override public PreparedStatement prepareStatement(String sql) { throw new UnsupportedOperationException(); }
    @Override public CallableStatement prepareCall(String sql) { throw new UnsupportedOperationException(); }
    @Override public String nativeSQL(String sql) { return sql; }
    @Override public void setAutoCommit(boolean autoCommit) {}
    @Override public boolean getAutoCommit() { return true; }
    @Override public void commit() {}
    @Override public void rollback() {}
    @Override public DatabaseMetaData getMetaData() { return null; }
    @Override public void setReadOnly(boolean readOnly) {}
    @Override public boolean isReadOnly() { return false; }
    @Override public void setCatalog(String catalog) {}
    @Override public String getCatalog() { return null; }
    @Override public void setTransactionIsolation(int level) {}
    @Override public int getTransactionIsolation() { return Connection.TRANSACTION_NONE; }
    @Override public SQLWarning getWarnings() { return null; }
    @Override public void clearWarnings() {}
    @Override public Statement createStatement(int resultSetType, int resultSetConcurrency) { throw new UnsupportedOperationException(); }
    @Override public void abort(Executor executor) {}
    @Override public void setNetworkTimeout(Executor executor, int milliseconds) {}
    @Override public int getNetworkTimeout() { return 0; }
    @Override public <T> T unwrap(Class<T> iface) { return null; }
    @Override public boolean isWrapperFor(Class<?> iface) { return false; }
    @Override public Map<String, Class<?>> getTypeMap() { return null; }
    @Override public void setTypeMap(Map<String, Class<?>> map) {}
    @Override public Savepoint setSavepoint() { return null; }
    @Override public Savepoint setSavepoint(String name) { return null; }
    @Override public void rollback(Savepoint savepoint) {}
    @Override public void releaseSavepoint(Savepoint savepoint) {}

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency)
            throws SQLException {

        throw new UnsupportedOperationException("Unimplemented method 'prepareStatement'");
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {

        throw new UnsupportedOperationException("Unimplemented method 'prepareCall'");
    }

    @Override
    public void setHoldability(int holdability) throws SQLException {

        throw new UnsupportedOperationException("Unimplemented method 'setHoldability'");
    }

    @Override
    public int getHoldability() throws SQLException {

        throw new UnsupportedOperationException("Unimplemented method 'getHoldability'");
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability)
            throws SQLException {

        throw new UnsupportedOperationException("Unimplemented method 'createStatement'");
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency,
            int resultSetHoldability) throws SQLException {

        throw new UnsupportedOperationException("Unimplemented method 'prepareStatement'");
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency,
            int resultSetHoldability) throws SQLException {

        throw new UnsupportedOperationException("Unimplemented method 'prepareCall'");
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {

        throw new UnsupportedOperationException("Unimplemented method 'prepareStatement'");
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {

        throw new UnsupportedOperationException("Unimplemented method 'prepareStatement'");
    }

    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {

        throw new UnsupportedOperationException("Unimplemented method 'prepareStatement'");
    }

    @Override
    public Clob createClob() throws SQLException {

        throw new UnsupportedOperationException("Unimplemented method 'createClob'");
    }

    @Override
    public Blob createBlob() throws SQLException {

        throw new UnsupportedOperationException("Unimplemented method 'createBlob'");
    }

    @Override
    public NClob createNClob() throws SQLException {

        throw new UnsupportedOperationException("Unimplemented method 'createNClob'");
    }

    @Override
    public SQLXML createSQLXML() throws SQLException {

        throw new UnsupportedOperationException("Unimplemented method 'createSQLXML'");
    }

    @Override
    public void setClientInfo(String name, String value) throws SQLClientInfoException {

        throw new UnsupportedOperationException("Unimplemented method 'setClientInfo'");
    }

    @Override
    public void setClientInfo(Properties properties) throws SQLClientInfoException {

        throw new UnsupportedOperationException("Unimplemented method 'setClientInfo'");
    }

    @Override
    public String getClientInfo(String name) throws SQLException {

        throw new UnsupportedOperationException("Unimplemented method 'getClientInfo'");
    }

    @Override
    public Properties getClientInfo() throws SQLException {

        throw new UnsupportedOperationException("Unimplemented method 'getClientInfo'");
    }

    @Override
    public Array createArrayOf(String typeName, Object[] elements) throws SQLException {

        throw new UnsupportedOperationException("Unimplemented method 'createArrayOf'");
    }

    @Override
    public Struct createStruct(String typeName, Object[] attributes) throws SQLException {

        throw new UnsupportedOperationException("Unimplemented method 'createStruct'");
    }

    @Override
    public void setSchema(String schema) throws SQLException {

        throw new UnsupportedOperationException("Unimplemented method 'setSchema'");
    }

    @Override
    public String getSchema() throws SQLException {

        throw new UnsupportedOperationException("Unimplemented method 'getSchema'");
    }
}
